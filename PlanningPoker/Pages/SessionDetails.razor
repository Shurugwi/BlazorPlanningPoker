@page "/sessions/{SessionId}"

@using PlanningPoker.Views;
@using PlanningPoker.ViewModels;

@inherits SessionDetailsBase;

<div class="container-fluid border-bottom mb-2">
    <div class="row">
        <div class="col-md-10">
            <div class="btn-group mb-2">
                <a class="btn btn-light"
                   href="Sessions"
                   data-toggle="tooltip"
                   data-placement="top"
                   title="All Sessions">
                    <span class="oi oi-list"></span>
                </a>
                <a class="btn btn-light"
                   href="Sessions/Create"
                   data-toggle="tooltip"
                   data-placement="top"
                   title="Create">
                    <span class="oi oi-plus"></span>
                </a>
                <a class="btn btn-light"
                   href="Sessions/@SessionId/Edit"
                   data-toggle="tooltip"
                   data-placement="top"
                   title="Edit">
                    <span class="oi oi-pencil"></span>
                </a>
            </div>
        </div>
        <div class="col-md-2">
            @if (Bind(BindingContext.Session as SessionViewModel, s => s.Host) == BindingContext.User
             && Bind(BindingContext.Session as SessionViewModel, vm => vm.State) != Data.PlanningPokerSessionState.Lobby)
            {
                <button class="btn btn-danger btn-block mb-2"
                        @onclick="@BindingContext.EndSession"
                        disabled="@(Bind(s => s.State) == Data.PlanningPokerSessionState.Complete)">
                    End Session
                </button>
            }
        </div>
    </div>
</div>

<div class="container" hidden="@(Bind(BindingContext.Session as SessionViewModel, vm => vm.State) != Data.PlanningPokerSessionState.Lobby)">
    <div class="row">
        <div class="offset-3 col-md-6">
            @if (Bind(BindingContext.Session as SessionViewModel, s => s.Host) == BindingContext.User)
            {
                <button class="btn btn-primary btn-block mb-2"
                        @onclick="BindingContext.StartSession"
                        disabled="@(Bind(s => s.State) != Data.PlanningPokerSessionState.Lobby)">
                    Start Session
                </button>
            }
            <h4>Participants</h4>
            <div class="list-group">
                @foreach (var connectedUser in Bind(vm => vm.ConnectedUsers))
                {
                    <div class="list-group-item">@connectedUser.Identity.Name</div>
                }
            </div>
        </div>
    </div>
</div>

<div class="container-fluid" hidden="@(Bind(vm => vm.State) != Data.PlanningPokerSessionState.Active)">
    <div class="row">
        <div class="col-md-1">
            <div class="text-center">
                <span class="text-muted">Participants</span>
                <div class="dropdown">
                    <button class="btn btn-outline-primary dropdown-toggle p-3 rounded-circle h3"
                            id="participants"
                            role="button"
                            data-toggle="dropdown"
                            aria-haspopup="true"
                            aria-expanded="false">
                        @Bind(vm => vm.ConnectedUsers).Count
                    </button>
                    <div class="dropdown-menu dropdown-menu-left" aria-labelledby="participants">
                        @foreach (var user in Bind(vm => vm.ConnectedUsers))
                        {
                            <button class="dropdown-item">@user.Identity.Name</button>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-10">
            <h3 class="text-center">@Bind(BindingContext.Session as SessionViewModel, s => s.Title)</h3>
            <h4 class="text-muted text-center">Host: @BindingContext.Session.Host.Identity.Name</h4>
        </div>
        <div class="col-md-1 text-right">
            <div class="text-center">
                <span class="text-muted">Stories</span>
                <div class="dropdown">
                    <button class="btn btn-outline-primary dropdown-toggle p-3 rounded-circle h3"
                            id="stories"
                            role="button"
                            data-toggle="dropdown"
                            aria-haspopup="true"
                            aria-expanded="false">
                        @Bind(vm => vm.Stories).Count
                    </button>
                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="stories">
                        @foreach (var story in Bind(vm => vm.Stories))
                        {
                            var active = (Bind(vm => vm.CurrentTurnIndex) == BindingContext.Stories.IndexOf(story) ? "active" : "");
                            <button class="dropdown-item @active"
                                    @onclick="(() => BindingContext.SetTurn(BindingContext.Stories.IndexOf(story)))">
                                @story.Text
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 mb-2">
            <div class="row">
                <div class="col-md-1">
                    <button type="button"
                            class="btn btn-light"
                            disabled="@(Bind(vm => vm.CurrentTurnIndex) < 1)"
                            @onclick="@(() => BindingContext.PrevTurn())">
                        <span class="oi oi-caret-left"></span>
                    </button>
                </div>
                <div class="col-md-10">
                    @if (Bind(vm => vm.CurrentTurn).Story.Points != 0)
                    {
                        <h4 class="text-center">@(Bind(vm => vm.CurrentTurn).Story.Text + " (" + Bind(vm => vm.CurrentTurn).Story.Points + ")")</h4>
                    }
                    else
                    {
                        <h4 class="text-center">@(Bind(vm => vm.CurrentTurn).Story.Text)</h4>
                    }
                </div>
                <div class="col-md-1 text-right">
                    <button type="button"
                            class="btn btn-light"
                            disabled="@(Bind(vm => vm.CurrentTurnIndex) >= (Bind(vm => vm.Turns).Count - 1))"
                            @onclick="@(() => BindingContext.NextTurn())">
                        <span class="oi oi-caret-right"></span>
                    </button>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12" style="height: 500px;">
                    @if (Bind(BindingContext.Session as SessionViewModel, s => s.Host) == BindingContext.User)
                    {
                        <div class="row">
                            <div class="col-md-3">
                                <button type="button"
                                        class="btn btn-secondary btn-block"
                                        disabled="@(Bind(vm => vm.CurrentTurn).Plays.Count == 0)"
                                        @onclick="BindingContext.ToggleCardsRevealed">
                                    @(Bind(BindingContext.CurrentTurn as TurnViewModel, vm => vm.IsRevealed) == true ? "Hide Cards" : "Reveal Cards")
                                </button>
                            </div>
                            <div class="col-md-3">
                                <button type="button"
                                        class="btn btn-primary btn-block"
                                        @onclick="BindingContext.PickStoryValue"
                                        disabled="@(Bind(vm => vm.SelectedPlay) == null)">
                                    Select Story Value
                                </button>
                            </div>
                        </div>
                    }
                    <div class="playingCards">
                        <ul class="table">
                            @foreach (var play in Bind(BindingContext.CurrentTurn as TurnViewModel, vm => vm.Plays))
                            {
                                <li>
                                    @if (Bind(BindingContext.CurrentTurn as TurnViewModel, vm => vm.IsRevealed) || play.User == BindingContext.User)
                                    {
                                        var cardId = "card-" + (BindingContext.CurrentTurn.Plays.IndexOf(play) + 1);
                                        var front = play.Card.FrontDisplay;
                                        <div class="playing-card@((Bind(vm => vm.SelectedPlay) == play) ? " selected" : "")"
                                             title="@play.User.Identity.Name"
                                             @onclick="@(() => BindingContext.SelectedPlay = play)">
                                            <span>@((MarkupString)front)</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="playing-card back">*</div>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="position-sticky fixed-bottom bg-white pb-4">
        <div class="row">
            <div class="col-md-12">
                <div class="playingCards">
                    <ul class="hand mb-0">
                        @foreach (var card in BindingContext.Cards)
                        {
                            var cardId = "card-" + (BindingContext.Cards.IndexOf(card) + 1);
                            <li>
                                <div class="playing-card@((Bind(vm => vm.SelectedCard) == card) ? " selected" : "")"
                                     @onclick="@(() => BindingContext.SelectedCard = card)">
                                    <span class="rank">@((MarkupString)card.FrontDisplay)</span>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <button type="button"
                        class="btn btn-primary"
                        @onclick="BindingContext.PlayCard"
                        disabled="@(Bind(vm => vm.CurrentTurn).Plays.Any(p => p.User == BindingContext.User))">
                    Play Card
                </button>
            </div>
        </div>
    </div>
</div>